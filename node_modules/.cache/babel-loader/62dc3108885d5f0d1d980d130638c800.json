{"ast":null,"code":"var _jsxFileName = \"/Users/d1ak8m5/gitprojects/shopping-cart-1/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport CartItems from './components/CartItems';\nimport CartHeader from './components/CartHeader';\nimport CartFooter from './components/CartFooter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      products: [],\n      cartItemList: []\n    };\n    this.total = 0;\n\n    this.getTotal = cart => {\n      /* const total = cart.reduce((pv, cv) => { \n          pv += (parseInt(cv.product.priceInCents) * parseInt(cv.quantity))\n            }, 0);*/\n      var sum = 0;\n\n      for (var i = 0; i < cart.length; i++) {\n        sum += parseInt(cart[i].product.priceInCents) * parseInt(cart[i].quantity);\n      }\n\n      this.total = sum;\n    };\n\n    this.addItemToList = product => {\n      console.log(\"i have received\", product);\n      var check = this.state.cartItemList.some(item => item.product.name == product.product.name);\n\n      if (check) {\n        var newList = this.state.cartItemList;\n        newList.map(item => {\n          if (product.product.name == item.product.name) {\n            console.log(\"i am true\");\n            var newQuantity = parseInt(item.quantity) + parseInt(product.quantity);\n            item.quantity = newQuantity;\n          }\n        });\n        this.setState(prevState => ({\n          cartItemList: prevState.cartItemList = newList\n        }));\n      } else {\n        this.setState(prevState => ({\n          cartItemList: prevState.cartItemList.concat(product)\n        }));\n      }\n\n      this.getTotal(this.state.cartItemList);\n    };\n  }\n\n  async componentDidMount() {\n    const productsResponse = await fetch(\"http://localhost:8082/api/products\");\n    const productsJson = await productsResponse.json();\n    const itemsResponse = await fetch(\"http://localhost:8082/api/items\");\n    const itemsJson = await itemsResponse.json();\n    this.setState({ ...this.state,\n      products: productsJson\n    });\n    console.log(\"products\", productsJson);\n    console.log(\"items \", itemsJson);\n    console.log(mappedItems);\n    this.setState({ ...this.state,\n      cartItemList: itemsJson\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CartHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CartItems, {\n        products: this.state,\n        addItemToList: this.addItemToList,\n        total: this.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CartFooter, {\n        copyright: \"2016\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/d1ak8m5/gitprojects/shopping-cart-1/src/App.js"],"names":["React","Component","CartItems","CartHeader","CartFooter","App","state","products","cartItemList","total","getTotal","cart","sum","i","length","parseInt","product","priceInCents","quantity","addItemToList","console","log","check","some","item","name","newList","map","newQuantity","setState","prevState","concat","componentDidMount","productsResponse","fetch","productsJson","json","itemsResponse","itemsJson","mappedItems","render"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\nimport './App.css';\nimport CartItems from './components/CartItems';\nimport CartHeader from './components/CartHeader';\nimport CartFooter from './components/CartFooter';\n\n\n\nclass App extends Component {\n  state = {\n    products:\n      [\n        \n      ], \n    cartItemList: \n      [\n        \n      ]\n  }\n\n  async componentDidMount(){\n    const productsResponse = await fetch(\"http://localhost:8082/api/products\");\n    const productsJson = await productsResponse.json()\n    const itemsResponse = await fetch(\"http://localhost:8082/api/items\")\n    const itemsJson = await itemsResponse.json()\n    this.setState({\n      ...this.state,\n      products: productsJson\n    })\n    console.log(\"products\", productsJson)\n    console.log(\"items \",itemsJson)\n\n \n   \n\n   \n\n    console.log(mappedItems)\n\n   this.setState({\n     ...this.state,\n     cartItemList: itemsJson\n   })\n   \n\n  }\n\n total = 0;\n\n  getTotal = (cart) => {\n    /* const total = cart.reduce((pv, cv) => { \n        pv += (parseInt(cv.product.priceInCents) * parseInt(cv.quantity))\n          }, 0);*/\n      var sum = 0;\n      for(var i = 0; i < cart.length; i++){\n        sum += parseInt(cart[i].product.priceInCents) * parseInt(cart[i].quantity)\n        \n      }\n\n       this.total = sum;\n\n  }\n\n  addItemToList = (product) => {\n      console.log(\"i have received\", product)\n      var check = this.state.cartItemList.some(item => item.product.name == product.product.name)\n      \n      if(check){\n        var newList = this.state.cartItemList\n        newList.map(item =>  {\n          if(product.product.name == item.product.name){\n            console.log(\"i am true\")\n\n           var newQuantity = parseInt(item.quantity) + parseInt(product.quantity)\n           item.quantity = newQuantity\n            \n          } \n        });\n        this.setState(prevState => ({cartItemList: prevState.cartItemList = newList})) \n\n      }else{\n        this.setState(prevState => ({cartItemList: prevState.cartItemList.concat(product)}))\n      }\n\n    this.getTotal(this.state.cartItemList);\n }\n\n  render() {\n    return (\n      <div>\n        <CartHeader />\n        <CartItems products={this.state} addItemToList={this.addItemToList} total={this.total}/>\n        <CartFooter copyright=\"2016\" />\n\n      </div>\n    )\n  };\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}